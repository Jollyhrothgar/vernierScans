#ifndef __BEAM_WIDTH_DATA__
#define __BEAM_WIDTH_DATA__

#include <cmath>
#include <sstream>

struct BeamWidthData {
  BeamWidthData() { Reset();};
  double rate;
  double rate_stat_err;
  double rate_sys_err;
  
  // horizontal beam separation from bpm data
  double x;
  double x_stat_err;
  double x_sys_err;

  // vertical beam separation from bpm data
  double y;
  double y_stat_err;
  double y_sys_err;

  // CAD planned horizontal beam separation
  double x_planned; 

  // CAD planned vertical beam separation
  double y_planned; 

  // Initialize everything to default values.
  void Reset() {
    rate = 0.;
    rate_stat_err = 0.;
    rate_sys_err = 0.;
    x_planned = 0.;
    y_planned = 0.;
    x = 0.;
    y = 0.;
    x_stat_err = 0.;
    y_stat_err = 0.;
    x_sys_err = 0.;
    y_sys_err = 0.;
  };

  // Get the total error for bpm derived horizontal beam separation
  double GetTotalErrX(){
    return pow(pow(x_sys_err,2.0)+pow(x_stat_err,2.0),0.5);
  };
  
  // Get the total error for bpm derived vertical beam separation
  double GetTotalErrY(){
    return pow(pow(x_sys_err,2.0)+pow(x_stat_err,2.0),0.5);
  };
  
  // Get the total error on the rate variable.
  double GetTotalErrRate() {
    return pow(pow(rate_stat_err,2.0)+pow(rate_sys_err,2.0),0.5);
  };

  // returns formatted string of data contents suitable for writing in a file
  std::string GetDataString(){
    std::stringstream out_data;
    out_data << rate
      << " " << rate_stat_err
      << " " << rate_sys_err
      << " " << x
      << " " << x_stat_err
      << " " << x_sys_err
      << " " << y
      << " " << y_stat_err
      << " " << y_sys_err
      << " " << y_planned; 
    return out_data.str();
  };

  // Initializes this object from a string assuming that the string was
  // generated by GetDataString
  int LoadDataString(const std::string& in_string) {
    std::stringstream in_data;
    in_data.str(in_string);
    in_data >> rate
      >> rate_stat_err
      >> rate_sys_err
      >> x
      >> x_stat_err
      >> x_sys_err
      >> y
      >> y_stat_err
      >> y_sys_err
      >> y_planned; 
    return 0;
  };
};
#endif
